{"version":3,"sources":["components/TagsList/TagsList.js","utils/filter-tags.js","pages/Questions/locales/RU.js","utils/question-form.js","api/questions-page.js","pages/Questions/Questions.js"],"names":["TagsList","filterList","name","handleClick","classNames","sectionClass","join","trim","classNamesList","length","className","map","item","value","filter","title","isActive","onClick","defaultProps","handleCheckboxBehavior","setState","inputValue","isChecked","stateFilters","filterItem","handleRadioBehavior","selectOneTag","tagName","deselectOneTag","deselectAllTags","questionsPageTexts","headTitle","MAIN_PAGE_TITLE","QUESTIONS_TITLE","headDescription","textStubNoData","formPlaceholder","formSubmitButton","formSubmitButtonLoading","questionForm","beforeSubmit","titleClass","formVisibilityClass","successSubmit","errorSubmit","getQuestionsPageData","limit","offset","tags","axios","get","baseURL","apiUrl","params","then","response","data","catch","err","Promise","reject","validationSettings","minLength","maxLength","pageSize","Questions","currentUser","useContext","CurrentUserContext","ErrorsContext","serverError","setError","clearError","openPopupError","PopupsContext","unauthorized","ERROR_CODES","badRequest","useState","isPageError","setIsPageError","isWaitingResponse","setIsWaitingResponse","errorsString","getServerErrors","mainQuestion","setMainQuestion","state","useLocation","chosenQuestion","question","searchQuestionId","id","questionsPageData","setQuestionsPageData","isLoadingPage","setIsLoadingPage","isLoadingPaginate","setIsLoadingPaginate","isFiltersUsed","setIsFiltersUsed","isChosenQuestionVisible","setIsChosenQuestionVisible","categories","setCategories","pageCount","setPageCount","pageIndex","setPageIndex","questionFormState","setQuestionFormState","useFormWithValidation","values","handleChange","errors","isValid","resetForm","setFormState","isError","setTimeout","handleSubmit","evt","preventDefault","post","postQuestion","status","finally","changeCategory","ALL_CATEGORIES","getActiveCategories","getQuestionsData","activeCategories","activeTags","results","count","Math","ceil","ERROR_MESSAGES","filterErrorMessage","debounceFiltration","useDebounce","DELAY_DEBOUNCE","debouncePaginate","useEffect","all","Error","message","res","filteredResult","categoriesArr","tag","changeCaseOfFirstLetter","slug","BasePage","renderQuestionsWithPaginate","onSubmit","noValidate","type","placeholder","onChange","required","error","color","isSubmittable","isDisabled","isDataForPage","AnimatedPageContainer","titleText","generalErrorMessage","renderPageContent","isCentered","isPaginate","CardQuestion","isQuestionsPage","isOpenByDefault"],"mappings":"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","file":"static/js/16.d7b14506.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PseudoButtonTag } from '../utils';\nimport './TagsList.scss';\n\nconst centeringFiltersMaxLength = 3;\n\nfunction TagsList({ filterList, name, handleClick, sectionClass }) {\n  const classNames = ['tags', sectionClass].join(' ').trim();\n  const classNamesList = [\n    'tags__list',\n    filterList.length > centeringFiltersMaxLength ? 'tags__list_mobile' : '',\n  ]\n    .join(' ')\n    .trim();\n\n  return (\n    <div className={classNames}>\n      <ul className={classNamesList}>\n        {filterList.map((item) => (\n          <li className=\"tags__list-item\" key={item?.name}>\n            <PseudoButtonTag\n              name={name}\n              value={item?.filter}\n              title={item?.name}\n              isActive={item?.isActive}\n              onClick={handleClick}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nTagsList.propTypes = {\n  filterList: PropTypes.arrayOf(PropTypes.any),\n  sectionClass: PropTypes.string,\n  name: PropTypes.string,\n  handleClick: PropTypes.func,\n};\n\nTagsList.defaultProps = {\n  filterList: [],\n  sectionClass: '',\n  name: '',\n  handleClick: () => {},\n};\n\nexport default TagsList;\n","/* eslint-disable no-param-reassign */\nexport const handleCheckboxBehavior = (setState, { inputValue, isChecked }) => {\n  setState((stateFilters) =>\n    stateFilters.map((filterItem) => {\n      if (filterItem.filter === inputValue) {\n        filterItem.isActive = isChecked;\n      }\n      return filterItem;\n    })\n  );\n};\n\nexport const handleRadioBehavior = (setState, { inputValue, isChecked }) => {\n  setState((stateFilters) =>\n    stateFilters.map((filterItem) => {\n      if (filterItem.filter === inputValue) {\n        filterItem.isActive = isChecked;\n      } else {\n        filterItem.isActive = false;\n      }\n      return filterItem;\n    })\n  );\n};\n\nexport const selectOneTag = (setState, tagName) => {\n  setState((stateFilters) =>\n    stateFilters.map((filterItem) => {\n      if (filterItem.filter === tagName) {\n        filterItem.isActive = true;\n      } else {\n        filterItem.isActive = false;\n      }\n      return filterItem;\n    })\n  );\n};\n\nexport const deselectOneTag = (setState, tagName) => {\n  setState((stateFilters) =>\n    stateFilters.map((filterItem) => {\n      if (filterItem.filter === tagName) {\n        filterItem.isActive = false;\n      }\n      return filterItem;\n    })\n  );\n};\n\nexport const deselectAllTags = (setState) => {\n  setState((stateFilters) =>\n    stateFilters.map((filterItem) => {\n      filterItem.isActive = false;\n      return filterItem;\n    })\n  );\n};\n","import { MAIN_PAGE_TITLE, QUESTIONS_TITLE } from '../../../config/routes';\n\nconst questionsPageTexts = {\n  headTitle: `${MAIN_PAGE_TITLE} | ${QUESTIONS_TITLE}`,\n  headDescription: 'Страница с ответами на основные вопросы.',\n  title: 'Ответы на вопросы',\n  textStubNoData:\n    'В данный момент страница вопросов пуста. Возвращайтесь позже!',\n  formPlaceholder: 'Введите вопрос',\n  formSubmitButton: 'Отправить',\n  formSubmitButtonLoading: 'Отправка...',\n};\n\nexport default questionsPageTexts;\n","const questionForm = {\n  beforeSubmit: {\n    title:\n      'Если вы не нашли ответ на свой вопрос — напишите нам, и мы включим его в список',\n    titleClass: '',\n    formVisibilityClass: '',\n  },\n  successSubmit: {\n    title:\n      'Спасибо! Мы приняли ваш вопрос. Ваш вопрос опубликуют, как только он пройдет проверку и модератор даст на него ответ!',\n    titleClass: 'add-question__title_success',\n    formVisibilityClass: 'question-form_invisible',\n  },\n  errorSubmit: {\n    title:\n      'Произошла ошибка при отправке вашего вопроса! Попробуйте повторить позже или обратиться в службу поддержки!',\n    titleClass: 'add-question__title_error',\n  },\n};\n\nexport default questionForm;\n","import axios from 'axios';\nimport { apiUrl, baseURL } from '../config/config';\n\n// получить данные страницы\nfunction getQuestionsPageData({ limit, offset, tags }) {\n  return axios\n    .get(`${baseURL}${apiUrl}/questions/`, {\n      params: { limit, offset, tags },\n    })\n    .then((response) => response.data)\n    .catch((err) => Promise.reject(err?.response));\n}\n\n// получить тагсы (список фильтров)\nfunction getQuestionsPageTags() {\n  return axios\n    .get(`${baseURL}${apiUrl}/questions/tags/`)\n    .then((response) => response.data)\n    .catch((err) => Promise.reject(err?.response));\n}\n\n// постинг вопроса\nfunction postQuestion(question) {\n  return axios\n    .post(`${baseURL}${apiUrl}/questions/`, question)\n    .then((response) => response.data)\n    .catch((err) => Promise.reject(err?.response));\n}\n\n// получение одного вопроса\nfunction getQuestion(id) {\n  return axios\n    .get(`${baseURL}${apiUrl}/questions/${id}`)\n    .then((response) => response.data)\n    .catch((err) => Promise.reject(new Error(`${err.message}`)));\n}\n\nexport {\n  getQuestionsPageData,\n  getQuestionsPageTags,\n  postQuestion,\n  getQuestion,\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport questionsPageTexts from './locales/RU';\nimport {\n  CurrentUserContext,\n  ErrorsContext,\n  PopupsContext,\n} from '../../contexts';\nimport { useDebounce, useFormWithValidation } from '../../hooks';\nimport {\n  ALL_CATEGORIES,\n  DELAY_DEBOUNCE,\n  ERROR_CODES,\n  ERROR_MESSAGES,\n} from '../../config/constants';\nimport { changeCaseOfFirstLetter } from '../../utils/utils';\nimport questionForm from '../../utils/question-form';\nimport {\n  deselectOneTag,\n  handleCheckboxBehavior,\n  selectOneTag,\n} from '../../utils/filter-tags';\nimport getServerErrors from '../../utils/form-errors';\nimport {\n  getQuestion,\n  getQuestionsPageData,\n  getQuestionsPageTags,\n  postQuestion,\n} from '../../api/questions-page';\nimport {\n  AnimatedPageContainer,\n  BasePage,\n  Button,\n  CardQuestion,\n  Input,\n  Loader,\n  Paginate,\n  TagsList,\n  TitleH1,\n  TitleH2,\n} from './index';\nimport './Questions.scss';\n\nconst {\n  headTitle,\n  headDescription,\n  title,\n  textStubNoData,\n  formPlaceholder,\n  formSubmitButton,\n  formSubmitButtonLoading,\n} = questionsPageTexts;\n\nconst validationSettings = {\n  question: {\n    minLength: 10,\n    maxLength: 500,\n  },\n};\n\nconst pageSize = 10;\n\nconst formTransformDelay = 4000;\n\nfunction Questions() {\n  const { currentUser } = useContext(CurrentUserContext);\n  const { serverError, setError, clearError } = useContext(ErrorsContext);\n  const { openPopupError } = useContext(PopupsContext);\n\n  const { unauthorized, badRequest } = ERROR_CODES;\n  const [isPageError, setIsPageError] = useState(false);\n  const [isWaitingResponse, setIsWaitingResponse] = useState(false);\n\n  const errorsString = serverError ? getServerErrors(serverError) : '';\n\n  // определение редиректа с Главной, чтобы показать выбранный вопрос\n  // + обработка редиректа поиска\n  const [mainQuestion, setMainQuestion] = useState(null);\n  const { state } = useLocation();\n  const chosenQuestion = state?.question;\n  const searchQuestionId = state?.id;\n\n  // начальная дата с API\n  const [questionsPageData, setQuestionsPageData] = useState(null);\n\n  const [isLoadingPage, setIsLoadingPage] = useState(true);\n  const [isLoadingPaginate, setIsLoadingPaginate] = useState(false);\n  // флаг применения фильтров\n  const [isFiltersUsed, setIsFiltersUsed] = useState(false);\n  // показывать ли выбранный на главной вопрос\n  const [isChosenQuestionVisible, setIsChosenQuestionVisible] = useState(false);\n  // категории фильтрации, состояние кнопок фильтров\n  const [categories, setCategories] = useState(null);\n\n  // Стейты для пагинации\n  const [pageCount, setPageCount] = useState(0);\n  const [pageIndex, setPageIndex] = useState(0);\n\n  // форма\n  const [questionFormState, setQuestionFormState] = useState(\n    questionForm.beforeSubmit\n  );\n  // валидация\n  const { values, handleChange, errors, isValid, resetForm } =\n    useFormWithValidation();\n\n  // форма вопросов\n  const setFormState = (isError) => {\n    if (isError) {\n      // форму не чистим!\n      setQuestionFormState(questionForm.errorSubmit);\n    } else {\n      setQuestionFormState(questionForm.successSubmit);\n      // вернулись к изначальной\n      setTimeout(() => {\n        resetForm();\n        clearError();\n        setQuestionFormState(questionForm.beforeSubmit);\n      }, formTransformDelay);\n    }\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const { question } = values;\n    setIsWaitingResponse(true);\n    postQuestion({ title: question })\n      .then(() => setFormState(false))\n      .catch((err) => {\n        if (err?.status === badRequest || err?.status === unauthorized)\n          setError(err?.data);\n        else setFormState(true);\n      })\n      .finally(() => setIsWaitingResponse(false));\n  };\n\n  // хэндлер клика по фильтру\n  const changeCategory = (inputValue, isChecked) => {\n    if (inputValue === ALL_CATEGORIES) {\n      selectOneTag(setCategories, ALL_CATEGORIES);\n    } else {\n      handleCheckboxBehavior(setCategories, { inputValue, isChecked });\n      deselectOneTag(setCategories, ALL_CATEGORIES);\n    }\n    setIsFiltersUsed(true);\n  };\n\n  // фильтрация\n  const getActiveCategories = () => {\n    if (categories) {\n      return categories\n        .filter((filter) => filter.isActive && filter.filter !== ALL_CATEGORIES)\n        .map((filter) => filter.filter)\n        .join(',');\n    }\n    return null;\n  };\n\n  // Функция обработки запроса АПИ с карточками\n  const getQuestionsData = (activeCategories) => {\n    const offset = isFiltersUsed ? 0 : pageSize * pageIndex;\n    const activeTags = activeCategories || getActiveCategories();\n\n    getQuestionsPageData({\n      limit: pageSize,\n      offset,\n      tags: activeTags,\n    })\n      .then(({ results, count }) => {\n        setPageCount(Math.ceil(count / pageSize));\n        setQuestionsPageData(results);\n        setIsChosenQuestionVisible(false);\n      })\n      .catch(() => {\n        if (isFiltersUsed) {\n          setError(ERROR_MESSAGES.filterErrorMessage);\n          openPopupError();\n        } else {\n          setIsPageError(true);\n        }\n      })\n      .finally(() => {\n        setIsLoadingPaginate(false);\n        setIsFiltersUsed(false);\n      });\n  };\n\n  const handleFiltration = () => {\n    if (categories && isFiltersUsed) {\n      const activeCategories = getActiveCategories();\n\n      if (activeCategories.length === 0) {\n        selectOneTag(setCategories, ALL_CATEGORIES);\n      }\n      getQuestionsData(activeCategories);\n    }\n  };\n\n  // фильтры/пагинация\n  const debounceFiltration = useDebounce(handleFiltration, DELAY_DEBOUNCE);\n  const debouncePaginate = useDebounce(getQuestionsData, DELAY_DEBOUNCE);\n\n  // фильтрация\n  useEffect(() => {\n    if (isFiltersUsed) {\n      debounceFiltration();\n    }\n  }, [isFiltersUsed]);\n\n  // пагинация\n  useEffect(() => {\n    if (!isLoadingPage && !isFiltersUsed) {\n      setIsLoadingPaginate(true);\n      debouncePaginate();\n    }\n  }, [pageSize, pageIndex]);\n\n  // API, первая загрузка\n  useEffect(() => {\n    Promise.all([\n      getQuestionsPageData({ limit: pageSize }),\n      getQuestionsPageTags(),\n    ])\n      .then(([{ results, count }, tags]) => {\n        setPageCount(Math.ceil(count / pageSize));\n\n        if (searchQuestionId) {\n          getQuestion(searchQuestionId)\n            .then((res) => {\n              setIsChosenQuestionVisible(true);\n              const filteredResult = results.filter(\n                (question) => question.id !== res.id\n              );\n              setMainQuestion(res);\n              setQuestionsPageData(filteredResult);\n            })\n            .catch(() => setIsPageError(true));\n        }\n\n        if (chosenQuestion) {\n          setIsChosenQuestionVisible(true);\n          const filteredResult = results.filter(\n            (question) => question.id !== chosenQuestion.id\n          );\n          setMainQuestion(chosenQuestion);\n          setQuestionsPageData(filteredResult);\n        } else setQuestionsPageData(results);\n\n        const categoriesArr = tags.map((tag) => {\n          const filterName = changeCaseOfFirstLetter(tag?.name);\n          return {\n            isActive: false,\n            name: filterName,\n            filter: tag?.slug,\n          };\n        });\n\n        setCategories([\n          { filter: ALL_CATEGORIES, name: ALL_CATEGORIES, isActive: true },\n          ...categoriesArr,\n        ]);\n      })\n      .catch(() => setIsPageError(true))\n      .finally(() => setIsLoadingPage(false));\n  }, [searchQuestionId]);\n\n  // глобальный лоадер\n  if ((!questionsPageData || !categories) && !isPageError) {\n    return <Loader isCentered />;\n  }\n\n  return (\n    <BasePage headTitle={headTitle} headDescription={headDescription}>\n      <section className=\"questions-page page__section fade-in\">\n        {renderPageContent()}\n      </section>\n    </BasePage>\n  );\n\n  // рендеринг\n  // заглушка, если нет даты или ошибка\n  function renderAnimatedContainer() {\n    return (\n      <AnimatedPageContainer\n        titleText={\n          isPageError\n            ? ERROR_MESSAGES.generalErrorMessage.title\n            : textStubNoData\n        }\n      />\n    );\n  }\n\n  // форма вопросов\n  function renderQuestionForm() {\n    return (\n      <>\n        <section className=\"add-question fade-in\">\n          <TitleH2\n            sectionClass={`add-question__title ${questionFormState.titleClass}`}\n            title={questionFormState.title}\n          />\n          <form\n            className={`question-form ${questionFormState.formVisibilityClass}`}\n            onSubmit={(evt) => handleSubmit(evt)}\n            noValidate\n          >\n            <fieldset className=\"question-form__add-question\">\n              <Input\n                id=\"questionsFormInput\"\n                type=\"text\"\n                name=\"question\"\n                placeholder={formPlaceholder}\n                onChange={handleChange}\n                value={values?.question}\n                minLength={validationSettings.question.minLength}\n                maxLength={validationSettings.question.maxLength}\n                required\n                error={errors?.question}\n                sectionClass=\"input__question-form\"\n              />\n              <Button\n                title={\n                  isWaitingResponse ? formSubmitButtonLoading : formSubmitButton\n                }\n                color=\"black\"\n                sectionClass=\"question-form__button\"\n                isSubmittable\n                isDisabled={isWaitingResponse || !isValid}\n              />\n            </fieldset>\n            <span className=\"form-error-message\">{errorsString}</span>\n          </form>\n        </section>\n      </>\n    );\n  }\n\n  function renderChosenQuestion() {\n    if (isChosenQuestionVisible && mainQuestion) {\n      return (\n        <li className=\"questions__list-item fade-in\">\n          <CardQuestion\n            data={mainQuestion}\n            sectionClass=\"card__questions_type_questions-page\"\n            isQuestionsPage\n            isOpenByDefault\n          />\n        </li>\n      );\n    }\n\n    return null;\n  }\n\n  function renderQuestionsContainer() {\n    return (\n      <>\n        <ul className=\"questions\">\n          {renderChosenQuestion()}\n          {questionsPageData.map((question) => (\n            <li\n              className=\"questions__list-item slide-bottom-up\"\n              key={question?.id}\n            >\n              <CardQuestion\n                data={question}\n                sectionClass=\"card__questions_type_questions-page\"\n                isQuestionsPage\n              />\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n\n  function renderQuestionsWithPaginate() {\n    if (isFiltersUsed) {\n      return <Loader isPaginate />;\n    }\n    return (\n      <>\n        {isLoadingPaginate ? <Loader isPaginate /> : renderQuestionsContainer()}\n\n        {pageCount > 1 && (\n          <Paginate\n            sectionClass=\"cards-section__pagination\"\n            pageCount={pageCount}\n            value={pageIndex}\n            onChange={setPageIndex}\n          />\n        )}\n      </>\n    );\n  }\n\n  // главная функция рендеринга\n  function renderPageContent() {\n    if (questionsPageData?.length > 0) {\n      return (\n        <>\n          <TitleH1 title={title} sectionClass=\"questions__title\" />\n\n          {categories?.length > 1 && (\n            <TagsList\n              filterList={categories}\n              name=\"tag\"\n              handleClick={changeCategory}\n            />\n          )}\n\n          {renderQuestionsWithPaginate()}\n\n          {currentUser && renderQuestionForm()}\n        </>\n      );\n    }\n\n    // залогинен и нет вопросов, покажем заглушку\n    const isDataForPage = questionsPageData?.length > 1;\n    if (isPageError || !isDataForPage) {\n      return renderAnimatedContainer();\n    }\n\n    return null;\n  }\n}\n\nexport default Questions;\n"],"sourceRoot":""}